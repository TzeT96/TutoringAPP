"use strict";(()=>{var e={};e.id=6235,e.ids=[6235],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,s){return s in t?t[s]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,s)):"function"==typeof t&&"default"===s?t:void 0}}})},3098:(e,t,s)=>{s.r(t),s.d(t,{config:()=>l,default:()=>d,routeModule:()=>c});var n={};s.r(n),s.d(n,{default:()=>u});var i=s(1802),r=s(7153),a=s(6249),o=s(8438);async function u(e,t){if("GET"!==e.method)return t.status(405).json({error:"Method not allowed"});let{school:s,course:n}=e.query;if(!s||!n||"string"!=typeof s||"string"!=typeof n)return t.status(400).json({error:"School and course parameters are required"});try{let e=n.replace(/\s+/g,"").toUpperCase(),i=s.toUpperCase(),r=await o.Z.$queryRaw`
      SELECT a.*, 
        COALESCE(
          JSON_ARRAYAGG(
            JSON_OBJECT(
              'id', s.id,
              'submission_detection_result', s.submission_detection_result,
              'submission_time', s.submission_time
            )
          ),
          JSON_ARRAY()
        ) as submissions
      FROM assignment_general_info_table a
      LEFT JOIN submission_detail_table s ON a.id = s.assignment_id
      WHERE UPPER(REPLACE(a.course_code, ' ', '')) = ${e}
      AND UPPER(a.school) = ${i}
      GROUP BY a.id, a.assignment_name, a.assignment_type, a.due_date, a.course_code, a.school, a.assignment_url
    `;if(!r||0===r.length)return t.status(404).json({error:"Course not found"});let a={id:r[0].course_code,name:r[0].assignment_name,code:r[0].course_code,school:i,semester:"Current",studentCount:0,highRiskCount:0,averageGrade:0,assignments:r.map(e=>{let t=[];try{t="string"==typeof e.submissions?JSON.parse(e.submissions):e.submissions}catch(e){console.error("Error parsing submissions:",e),t=[]}let s=t.map(e=>{let t;try{t="string"==typeof e.submission_detection_result?JSON.parse(e.submission_detection_result):e.submission_detection_result}catch(e){console.error("Error parsing submission_detection_result:",e),t={ai_probability:0,student_email:"unknown@example.com",student_name:"Unknown Student",requires_verification:0,verification_questions:[],canvas_url:""}}let s="cleared";return t.ai_probability>=.8?s="confirmed":t.ai_probability>=.6&&(s="suspected"),{studentId:t.student_email,studentName:t.student_name,studentEmail:t.student_email,score:0,submissionDate:e.submission_time,plagiarismStatus:s,similarityScore:Math.round(100*t.ai_probability),requiresVerification:1===t.requires_verification,verificationQuestions:t.verification_questions,canvasUrl:t.canvas_url}});return{id:e.id.toString(),title:e.assignment_name,type:e.assignment_type,dueDate:e.due_date,totalPoints:100,studentResults:s}}),students:[]},u=new Set,d=0;return a.assignments.forEach(e=>{e.studentResults.forEach(e=>{u.add(e.studentEmail),("suspected"===e.plagiarismStatus||"confirmed"===e.plagiarismStatus)&&d++})}),a.studentCount=u.size,a.highRiskCount=d,a.students=Array.from(u).map(e=>({id:e,name:a.assignments.flatMap(e=>e.studentResults).find(t=>t.studentEmail===e)?.studentName||"Unknown Student",email:e})),t.status(200).json(a)}catch(e){return console.error("Error fetching course data:",e),t.status(500).json({error:"Failed to fetch course data"})}}let d=(0,a.l)(n,"default"),l=(0,a.l)(n,"config"),c=new i.PagesAPIRouteModule({definition:{kind:r.x.PAGES_API,page:"/api/courses/[school]/[course]",pathname:"/api/courses/[school]/[course]",bundlePath:"",filename:""},userland:n})},8438:(e,t,s)=>{s.d(t,{Z:()=>i});let n=require("@prisma/client"),i=globalThis.prisma||new n.PrismaClient},7153:(e,t)=>{var s;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return s}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(s||(s={}))},1802:(e,t,s)=>{e.exports=s(145)}};var t=require("../../../../webpack-api-runtime.js");t.C(e);var s=t(t.s=3098);module.exports=s})();